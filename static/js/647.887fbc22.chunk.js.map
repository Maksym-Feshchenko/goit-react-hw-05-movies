{"version":3,"file":"static/js/647.887fbc22.chunk.js","mappings":"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","sources":["components/Api.js","pages/Cast.js","pages/Reviews.js","pages/MovieDetails.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const KEY = '56a1158049e37c9be6acff13320da327';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500'\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n    const response = await fetch(url, config);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not fond'));\n}\n\nexport function fetchTrendingMovies() {\n    return fetchWithErrorHandling(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n}\n\nexport function fetchMoviesId(movieId) {\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}?api_key=${KEY}&language=en-US`);\n}\n\nexport function fetchMovieSearch(query) {\n    return fetchWithErrorHandling(`${BASE_URL}/search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`);\n}\n\nexport function fetchMovieCast(movieId) {\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n}\n\nexport function fetchMovieReviews(movieId) {\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`);\n}\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { BASE_URL, KEY } from '../components/Api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n        const data = await response.json();\n        setCast(data.cast);\n      } catch (error) {\n        console.log('Error getting cast information:', error);\n      }\n    };\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <div className='fontSizeDet'>\n      <ul className='castList'>\n        {cast.map((actor) => (\n          <li key={actor.id} className='castItem'>\n            <img src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`} alt={actor.name} className='actorImage' />\n            <div className='actorDetails'>\n              <h3 className='actorName'>{actor.name}</h3>\n              <p className='characterName'>{actor.character}</p>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { BASE_URL, KEY } from '../components/Api';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`);\n        const data = await response.json();\n        setReviews(data.results);\n      } catch (error) {\n        console.log('Error getting reviews:', error);\n      }\n    };\n\n    fetchMovieReviews();\n  }, [movieId]);\n\n  return (\n    <div className='fontSizeDet'>\n      <ul className='reviewList'>\n        {reviews.map((review) => (\n          <li key={review.id} className='reviewItem'>\n            <h4> * {review.author}</h4>\n            <p> âˆ™ {review.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Cast from '../pages/Cast';\nimport Reviews from '../pages/Reviews';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const [showCast, setShowCast] = useState(false);\n  const [showReviews, setShowReviews] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const apiKey = '56a1158049e37c9be6acff13320da327';\n        const url = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        setMovieDetails(data);\n        setLoading(false);\n      } catch (error) {\n        console.log('Failed to fetch movie details:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!movieDetails) {\n    return <div>Failed to fetch movie details.</div>;\n  }\n\n  const handleToggleCast = () => {\n    setShowCast(!showCast);\n  };\n\n  const handleToggleReviews = () => {\n    setShowReviews(!showReviews);\n  };\n\n  return (\n    <div>\n        <div className='movieDetailsCard'>\n        <h1>{movieDetails.title}</h1>\n        <img src={`https://image.tmdb.org/t/p/w200/${movieDetails.poster_path}`} alt={movieDetails.title} />\n        <p>Ganres: {movieDetails.genres.map((genre) => genre.name).join(', ')}</p>\n        <p>Overview: {movieDetails.overview}</p>\n        <p>User score: {movieDetails.vote_average.toFixed(1)}/10</p>\n        <p>Release Date: {movieDetails.release_date}</p>\n        </div>\n\n        <ul>\n          <li className='list'>\n          <button onClick={handleToggleCast} className='button'>Cast</button>\n        {showCast && <Cast movieId={movieId} />}\n          </li>\n          <li className='list'>\n          <button onClick={handleToggleReviews} className='button'>Reviews</button>\n      {showReviews && <Reviews movieId={movieId} />}\n          </li>\n        </ul>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["BASE_URL","KEY","IMAGE_URL","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","movieId","useParams","useState","cast","setCast","useEffect","fetchMovieCast","data","console","log","className","map","actor","src","profile_path","alt","name","character","id","reviews","setReviews","fetchMovieReviews","results","review","author","content","movieDetails","setMovieDetails","loading","setLoading","showCast","setShowCast","showReviews","setShowReviews","fetchMovieDetails","title","poster_path","genres","genre","join","overview","vote_average","toFixed","release_date","onClick","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","error","done","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}